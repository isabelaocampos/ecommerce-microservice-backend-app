pipeline {
    agent any
    
    tools {
        maven 'Maven-3.8.1'
    }
    
    environment {
        JAVA_HOME = '/opt/jdk-11.0.2'
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=true'
        MINIKUBE_IP = sh(script: 'kubectl config view -o jsonpath=\'{.clusters[0].cluster.server}\' | sed \'s|https://||;s|:.*||\'', returnStdout: true).trim()
    }
    
    stages {
        stage('🔧 Configurar Kubernetes') {
            steps {
                echo '⚙️ Configurando acceso a Kubernetes/Minikube...'
                sh '''
                    # Opción 1: Intentar usar minikube update-context para corregir las rutas
                    minikube update-context || true
                    
                    # Opción 2: Si falla, usar kubectl desde minikube directamente
                    # Verificar conexión
                    kubectl version --client || echo "kubectl encontrado"
                    
                    # Verificar que podemos conectar con minikube
                    kubectl get nodes || minikube kubectl -- get nodes
                '''
            }
        }
        
        stage('🔍 Checkout') {
            steps {
                echo '📥 Clonando repositorio...'
                checkout scm
            }
        }
        
        stage('🏗️ Build & Test - Fase 1') {
            parallel {
                stage('user-service') {
                    stages {
                        stage('Build user-service') {
                            steps {
                                echo '🔨 Construyendo user-service...'
                                dir('user-service') {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                        stage('Test user-service') {
                            steps {
                                echo '🧪 Ejecutando tests de user-service...'
                                dir('user-service') {
                                    sh 'mvn test || true'
                                }
                            }
                        }
                        stage('Docker Build user-service') {
                            steps {
                                echo '🐳 Construyendo imagen Docker de user-service en Minikube...'
                                dir('user-service') {
                                    sh '''
                                        # Construir directamente en Minikube usando minikube image build
                                        minikube image build -t user-service:latest .
                                        minikube image build -t user-service:${BUILD_NUMBER} .
                                        
                                        # Verificar que la imagen existe
                                        minikube image ls | grep user-service || echo "Imagen creada"
                                    '''
                                }
                            }
                        }
                    }
                }
                
                stage('product-service') {
                    stages {
                        stage('Build product-service') {
                            steps {
                                echo '🔨 Construyendo product-service...'
                                dir('product-service') {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                        stage('Test product-service') {
                            steps {
                                echo '🧪 Ejecutando tests de product-service...'
                                dir('product-service') {
                                    sh 'mvn test || true'
                                }
                            }
                        }
                        stage('Docker Build product-service') {
                            steps {
                                echo '🐳 Construyendo imagen Docker de product-service en Minikube...'
                                dir('product-service') {
                                    sh '''
                                        minikube image build -t product-service:latest .
                                        minikube image build -t product-service:${BUILD_NUMBER} .
                                        minikube image ls | grep product-service || echo "Imagen creada"
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('🏗️ Build & Test - Fase 2') {
            parallel {
                stage('favourite-service') {
                    stages {
                        stage('Build favourite-service') {
                            steps {
                                echo '🔨 Construyendo favourite-service...'
                                dir('favourite-service') {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                        stage('Test favourite-service') {
                            steps {
                                echo '🧪 Ejecutando tests de favourite-service...'
                                dir('favourite-service') {
                                    sh 'mvn test || true'
                                }
                            }
                        }
                        stage('Docker Build favourite-service') {
                            steps {
                                echo '🐳 Construyendo imagen Docker de favourite-service en Minikube...'
                                dir('favourite-service') {
                                    sh '''
                                        minikube image build -t favourite-service:latest .
                                        minikube image build -t favourite-service:${BUILD_NUMBER} .
                                        minikube image ls | grep favourite-service || echo "Imagen creada"
                                    '''
                                }
                            }
                        }
                    }
                }
                
                stage('order-service') {
                    stages {
                        stage('Build order-service') {
                            steps {
                                echo '🔨 Construyendo order-service...'
                                dir('order-service') {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                        stage('Test order-service') {
                            steps {
                                echo '🧪 Ejecutando tests de order-service...'
                                dir('order-service') {
                                    sh 'mvn test || true'
                                }
                            }
                        }
                        stage('Docker Build order-service') {
                            steps {
                                echo '🐳 Construyendo imagen Docker de order-service en Minikube...'
                                dir('order-service') {
                                    sh '''
                                        minikube image build -t order-service:latest .
                                        minikube image build -t order-service:${BUILD_NUMBER} .
                                        minikube image ls | grep order-service || echo "Imagen creada"
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('🏗️ Build & Test - Fase 3') {
            parallel {
                stage('payment-service') {
                    stages {
                        stage('Build payment-service') {
                            steps {
                                echo '🔨 Construyendo payment-service...'
                                dir('payment-service') {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                        stage('Test payment-service') {
                            steps {
                                echo '🧪 Ejecutando tests de payment-service...'
                                dir('payment-service') {
                                    sh 'mvn test || true'
                                }
                            }
                        }
                        stage('Docker Build payment-service') {
                            steps {
                                echo '🐳 Construyendo imagen Docker de payment-service en Minikube...'
                                dir('payment-service') {
                                    sh '''
                                        minikube image build -t payment-service:latest .
                                        minikube image build -t payment-service:${BUILD_NUMBER} .
                                        minikube image ls | grep payment-service || echo "Imagen creada"
                                    '''
                                }
                            }
                        }
                    }
                }
                
                stage('shipping-service') {
                    stages {
                        stage('Build shipping-service') {
                            steps {
                                echo '🔨 Construyendo shipping-service...'
                                dir('shipping-service') {
                                    sh 'mvn clean package -DskipTests'
                                }
                            }
                        }
                        stage('Test shipping-service') {
                            steps {
                                echo '🧪 Ejecutando tests de shipping-service...'
                                dir('shipping-service') {
                                    sh 'mvn test || true'
                                }
                            }
                        }
                        stage('Docker Build shipping-service') {
                            steps {
                                echo '🐳 Construyendo imagen Docker de shipping-service en Minikube...'
                                dir('shipping-service') {
                                    sh '''
                                        minikube image build -t shipping-service:latest .
                                        minikube image build -t shipping-service:${BUILD_NUMBER} .
                                        minikube image ls | grep shipping-service || echo "Imagen creada"
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('📦 Verificar Artefactos') {
            steps {
                echo '🔍 Verificando JAR files y Docker images...'
                sh '''
                    echo "=== JAR Files Generados ==="
                    find . -name "*.jar" -path "*/target/*" -not -path "*original*" | while read jar; do
                        echo "✅ $jar ($(du -h "$jar" | cut -f1))"
                    done
                    
                    echo ""
                    echo "=== Docker Images en Minikube ==="
                    minikube image ls | grep -E "(user-service|product-service|favourite-service|order-service|payment-service|shipping-service)" || echo "Verificando imágenes..."
                '''
            }
        }
        
        stage('🚀 Deploy to Kubernetes (Stage)') {
            steps {
                echo '☸️ Desplegando microservicios en Kubernetes...'
                sh '''
                    # Asegurar que tenemos el contexto correcto
                    minikube update-context || true
                    
                    # Usar kubectl a través de minikube si el directo falla
                    KUBECTL_CMD="kubectl"
                    if ! kubectl version --client > /dev/null 2>&1; then
                        KUBECTL_CMD="minikube kubectl --"
                    fi
                    
                    # Crear namespace si no existe
                    $KUBECTL_CMD get namespace ecommerce || $KUBECTL_CMD create namespace ecommerce
                    
                    # Aplicar deployments
                    echo "🔌 Desplegando user-service..."
                    $KUBECTL_CMD apply -f k8s/user-service-deployment.yaml
                    
                    echo "🔌 Desplegando product-service..."
                    $KUBECTL_CMD apply -f k8s/product-service-deployment.yaml
                    
                    echo "🔌 Desplegando favourite-service..."
                    $KUBECTL_CMD apply -f k8s/favourite-service-deployment.yaml
                    
                    echo "🔌 Desplegando order-service..."
                    $KUBECTL_CMD apply -f k8s/order-service-deployment.yaml
                    
                    echo "🔌 Desplegando payment-service..."
                    $KUBECTL_CMD apply -f k8s/payment-service-deployment.yaml
                    
                    echo "🔌 Desplegando shipping-service..."
                    $KUBECTL_CMD apply -f k8s/shipping-service-deployment.yaml
                    
                    echo ""
                    echo "✅ Deployments aplicados"
                '''
            }
        }
        
        stage('⏳ Esperar Deployments') {
            steps {
                echo '⏰ Esperando que los pods estén listos...'
                sh '''
                    # Determinar comando kubectl correcto
                    KUBECTL_CMD="kubectl"
                    if ! kubectl version --client > /dev/null 2>&1; then
                        KUBECTL_CMD="minikube kubectl --"
                    fi
                    
                    echo "Esperando user-service..."
                    $KUBECTL_CMD wait --for=condition=available --timeout=120s deployment/user-service -n ecommerce || true
                    
                    echo "Esperando product-service..."
                    $KUBECTL_CMD wait --for=condition=available --timeout=120s deployment/product-service -n ecommerce || true
                    
                    echo "Esperando favourite-service..."
                    $KUBECTL_CMD wait --for=condition=available --timeout=120s deployment/favourite-service -n ecommerce || true
                    
                    echo "Esperando order-service..."
                    $KUBECTL_CMD wait --for=condition=available --timeout=120s deployment/order-service -n ecommerce || true
                    
                    echo "Esperando payment-service..."
                    $KUBECTL_CMD wait --for=condition=available --timeout=120s deployment/payment-service -n ecommerce || true
                    
                    echo "Esperando shipping-service..."
                    $KUBECTL_CMD wait --for=condition=available --timeout=120s deployment/shipping-service -n ecommerce || true
                    
                    echo ""
                    echo "Estado de los pods:"
                    $KUBECTL_CMD get pods -n ecommerce
                '''
            }
        }
        
        stage('🧪 Integration Tests on K8s') {
            parallel {
                stage('Test user-service en K8s') {
                    steps {
                        echo '🔍 Verificando user-service en Kubernetes...'
                        sh '''
                            MINIKUBE_IP=$(minikube ip)
                            SERVICE_URL="http://${MINIKUBE_IP}:30700"
                            
                            echo "Testeando: ${SERVICE_URL}/actuator/health"
                            
                            # Esperar a que el servicio responda
                            for i in {1..30}; do
                                if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                    echo "✅ user-service está respondiendo"
                                    curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "✅ Health check OK"
                                    break
                                fi
                                echo "Intento $i/30 - Esperando user-service..."
                                sleep 5
                            done
                        '''
                    }
                }
                
                stage('Test product-service en K8s') {
                    steps {
                        echo '🔍 Verificando product-service en Kubernetes...'
                        sh '''
                            MINIKUBE_IP=$(minikube ip)
                            SERVICE_URL="http://${MINIKUBE_IP}:30500"
                            
                            echo "Testeando: ${SERVICE_URL}/actuator/health"
                            
                            for i in {1..30}; do
                                if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                    echo "✅ product-service está respondiendo"
                                    curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "✅ Health check OK"
                                    break
                                fi
                                echo "Intento $i/30 - Esperando product-service..."
                                sleep 5
                            done
                        '''
                    }
                }
                
                stage('Test order-service en K8s') {
                    steps {
                        echo '🔍 Verificando order-service en Kubernetes...'
                        sh '''
                            MINIKUBE_IP=$(minikube ip)
                            SERVICE_URL="http://${MINIKUBE_IP}:30300"
                            
                            echo "Testeando: ${SERVICE_URL}/actuator/health"
                            
                            for i in {1..30}; do
                                if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                    echo "✅ order-service está respondiendo"
                                    curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "✅ Health check OK"
                                    break
                                fi
                                echo "Intento $i/30 - Esperando order-service..."
                                sleep 5
                            done
                        '''
                    }
                }
                
                stage('Test payment-service en K8s') {
                    steps {
                        echo '🔍 Verificando payment-service en Kubernetes...'
                        sh '''
                            MINIKUBE_IP=$(minikube ip)
                            SERVICE_URL="http://${MINIKUBE_IP}:30400"
                            
                            echo "Testeando: ${SERVICE_URL}/actuator/health"
                            
                            for i in {1..30}; do
                                if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                    echo "✅ payment-service está respondiendo"
                                    curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "✅ Health check OK"
                                    break
                                fi
                                echo "Intento $i/30 - Esperando payment-service..."
                                sleep 5
                            done
                        '''
                    }
                }
                
                stage('Test shipping-service en K8s') {
                    steps {
                        echo '🔍 Verificando shipping-service en Kubernetes...'
                        sh '''
                            MINIKUBE_IP=$(minikube ip)
                            SERVICE_URL="http://${MINIKUBE_IP}:30600"
                            
                            echo "Testeando: ${SERVICE_URL}/actuator/health"
                            
                            for i in {1..30}; do
                                if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                    echo "✅ shipping-service está respondiendo"
                                    curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "✅ Health check OK"
                                    break
                                fi
                                echo "Intento $i/30 - Esperando shipping-service..."
                                sleep 5
                            done
                        '''
                    }
                }
                
                stage('Test favourite-service en K8s') {
                    steps {
                        echo '🔍 Verificando favourite-service en Kubernetes...'
                        sh '''
                            MINIKUBE_IP=$(minikube ip)
                            SERVICE_URL="http://${MINIKUBE_IP}:30800"
                            
                            echo "Testeando: ${SERVICE_URL}/actuator/health"
                            
                            for i in {1..30}; do
                                if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                    echo "✅ favourite-service está respondiendo"
                                    curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "✅ Health check OK"
                                    break
                                fi
                                echo "Intento $i/30 - Esperando favourite-service..."
                                sleep 5
                            done
                        '''
                    }
                }
            }
        }
        
        stage('📊 Estado Final') {
            steps {
                echo '📋 Generando reporte del deployment...'
                sh '''
                    # Determinar comando kubectl correcto
                    KUBECTL_CMD="kubectl"
                    if ! kubectl version --client > /dev/null 2>&1; then
                        KUBECTL_CMD="minikube kubectl --"
                    fi
                    
                    echo "========================================="
                    echo "    REPORTE DE DEPLOYMENT - STAGE"
                    echo "========================================="
                    echo ""
                    
                    echo "📦 Deployments:"
                    $KUBECTL_CMD get deployments -n ecommerce
                    echo ""
                    
                    echo "🎯 Services:"
                    $KUBECTL_CMD get services -n ecommerce
                    echo ""
                    
                    echo "🐳 Pods:"
                    $KUBECTL_CMD get pods -n ecommerce
                    echo ""
                    
                    echo "📡 Endpoints de los servicios:"
                    MINIKUBE_IP=$(minikube ip)
                    echo "  user-service:      http://${MINIKUBE_IP}:30700"
                    echo "  product-service:   http://${MINIKUBE_IP}:30500"
                    echo "  favourite-service: http://${MINIKUBE_IP}:30800"
                    echo "  order-service:     http://${MINIKUBE_IP}:30300"
                    echo "  payment-service:   http://${MINIKUBE_IP}:30400"
                    echo "  shipping-service:  http://${MINIKUBE_IP}:30600"
                    echo ""
                    
                    echo "========================================="
                '''
            }
        }
    }
    
    post {
        success {
            echo '✅ ¡Pipeline completado exitosamente!'
            echo '📋 Todos los microservicios fueron:'
            echo '   ✓ Compilados'
            echo '   ✓ Testeados'
            echo '   ✓ Construidos como Docker images'
            echo '   ✓ Desplegados en Kubernetes'
            echo '   ✓ Verificados con health checks'
        }
        failure {
            echo '❌ Pipeline falló. Revisando estado...'
            sh '''
                # Determinar comando kubectl correcto
                KUBECTL_CMD="kubectl"
                if ! kubectl version --client > /dev/null 2>&1; then
                    KUBECTL_CMD="minikube kubectl --"
                fi
                
                echo "Estado de pods en ecommerce namespace:"
                $KUBECTL_CMD get pods -n ecommerce || true
                
                echo ""
                echo "Logs de pods con problemas:"
                $KUBECTL_CMD get pods -n ecommerce -o json | jq -r '.items[] | select(.status.phase != "Running") | .metadata.name' | while read pod; do
                    echo "=== Logs de $pod ==="
                    $KUBECTL_CMD logs $pod -n ecommerce --tail=50 || true
                done
            '''
        }
        always {
            echo '🏁 Pipeline finalizado'
            // Archivar resultados de tests
            junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
        }
    }
}