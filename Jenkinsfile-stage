pipeline {
    agent any
    
    tools {
        maven 'Maven-3.8.1' // Configura Maven en Jenkins: Manage Jenkins > Global Tool Configuration
    }
    
    environment {
        JAVA_HOME = '/opt/jdk-11.0.25+9'
        PATH = "/opt/jdk-11.0.25+9/bin:${env.PATH}"
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=true'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Clonando repositorio...'
                checkout scm
            }
        }
        
        stage('Build Microservices - Fase 1') {
            parallel {
                stage('Build user-service') {
                    steps {
                        echo 'ÔøΩ Construyendo user-service (Puerto 8700)...'
                        dir('user-service') {
                            sh 'mvn clean package -Dmaven.test.skip=true'
                        }
                    }
                }
                
                stage('Build product-service') {
                    steps {
                        echo 'üî® Construyendo product-service (Puerto 8500)...'
                        dir('product-service') {
                            sh 'mvn clean package -Dmaven.test.skip=true'
                        }
                    }
                }
            }
        }
        
        stage('Build Microservices - Fase 2') {
            parallel {
                stage('Build favourite-service') {
                    steps {
                        echo 'üî® Construyendo favourite-service (Puerto 8800) - Depende de user + product...'
                        dir('favourite-service') {
                            sh 'mvn clean package -Dmaven.test.skip=true'
                        }
                    }
                }
                
                stage('Build order-service') {
                    steps {
                        echo 'üî® Construyendo order-service (Puerto 8300) - Depende de user + product...'
                        dir('order-service') {
                            sh 'mvn clean package -Dmaven.test.skip=true'
                        }
                    }
                }
            }
        }
        
        stage('Build Microservices - Fase 3') {
            stages {
                stage('Build payment-service') {
                    steps {
                        echo 'ÔøΩ Construyendo payment-service (Puerto 8400) - Depende de order...'
                        dir('payment-service') {
                            sh 'mvn clean package -Dmaven.test.skip=true'
                        }
                    }
                }
                
                stage('Build shipping-service') {
                    steps {
                        echo 'üî® Construyendo shipping-service (Puerto 8600) - Depende de order...'
                        dir('shipping-service') {
                            sh 'mvn clean package -Dmaven.test.skip=true'
                        }
                    }
                }
            }
        }
        
        stage('Verificar Artefactos') {
            steps {
                echo 'ÔøΩ Verificando JAR files generados...'
                sh '''
                    echo "=== Artefactos generados ==="
                    find . -name "*.jar" -path "*/target/*" -not -path "*original*" | while read jar; do
                        echo "‚úÖ $jar ($(du -h "$jar" | cut -f1))"
                    done
                '''
            }
        }
        
        stage('Tests Unitarios') {
            parallel {
                stage('Test user-service') {
                    steps {
                        dir('user-service') {
                            sh 'mvn test || true'
                        }
                    }
                }
                
                stage('Test product-service') {
                    steps {
                        dir('product-service') {
                            sh 'mvn test || true'
                        }
                    }
                }
                
                stage('Test favourite-service') {
                    steps {
                        dir('favourite-service') {
                            sh 'mvn test || true'
                        }
                    }
                }
                
                stage('Test order-service') {
                    steps {
                        dir('order-service') {
                            sh 'mvn test || true'
                        }
                    }
                }
                
                stage('Test payment-service') {
                    steps {
                        dir('payment-service') {
                            sh 'mvn test || true'
                        }
                    }
                }
                
                stage('Test shipping-service') {
                    steps {
                        dir('shipping-service') {
                            sh 'mvn test || true'
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ ¬°Build exitoso! Todos los microservicios compilados correctamente.'
            echo 'üìã Resumen:'
            echo '   - user-service (8700) ‚úÖ'
            echo '   - product-service (8500) ‚úÖ'
            echo '   - favourite-service (8800) ‚úÖ'
            echo '   - order-service (8300) ‚úÖ'
            echo '   - payment-service (8400) ‚úÖ'
            echo '   - shipping-service (8600) ‚úÖ'
        }
        failure {
            echo '‚ùå Build fall√≥. Revisa los logs para m√°s detalles.'
        }
        always {
            echo 'üèÅ Pipeline de construcci√≥n de microservicios finalizado'
        }
    }
}