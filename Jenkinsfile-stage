pipeline {
    agent any
    
    tools {
        maven 'Maven-3.8.1'
    }
    
    environment {
        JAVA_HOME = '/opt/jdk-11.0.2'
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=true'
        MINIKUBE_IP = sh(script: 'kubectl config view -o jsonpath=\'{.clusters[0].cluster.server}\' | sed \'s|https://||;s|:.*||\'', returnStdout: true).trim()
        DOCKER_BUILDKIT = '1'
    }
    
    stages {
        stage('üîç Checkout') {
            steps {
                echo 'üì• Clonando repositorio...'
                checkout scm
            }
        }
        
        stage('‚öôÔ∏è Bootstrap api-gateway & proxy-client') {
            stages {
                stage('Build api-gateway') {
                    steps {
                        echo 'üî® Construyendo api-gateway...'
                        dir('api-gateway') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Docker Build api-gateway') {
                    steps {
                        echo 'üê≥ Construyendo imagen Docker de api-gateway...'
                        dir('api-gateway') {
                            sh '''
                                docker build -t api-gateway:latest .
                                docker tag api-gateway:latest api-gateway:${BUILD_NUMBER}
                                docker save api-gateway:latest | docker exec -i minikube docker load
                            '''
                        }
                    }
                }
                stage('Build proxy-client') {
                    steps {
                        echo 'üî® Construyendo proxy-client...'
                        dir('proxy-client') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Docker Build proxy-client') {
                    steps {
                        echo 'üê≥ Construyendo imagen Docker de proxy-client...'
                        dir('proxy-client') {
                            sh '''
                                docker build -t proxy-client:latest .
                                docker tag proxy-client:latest proxy-client:${BUILD_NUMBER}
                                docker save proxy-client:latest | docker exec -i minikube docker load
                            '''
                        }
                    }
                }
                stage('Deploy api-gateway & proxy-client to k8s (if manifests exist)') {
                    steps {
                        echo '‚ò∏Ô∏è Desplegando api-gateway y proxy-client (si hay manifests)...'
                        sh '''
                            kubectl get namespace ecommerce || kubectl create namespace ecommerce
                            if [ -f k8s/api-gateway-deployment.yaml ]; then
                                kubectl apply -f k8s/api-gateway-deployment.yaml -n ecommerce
                                kubectl wait --for=condition=available --timeout=120s deployment/api-gateway -n ecommerce || true
                            else
                                echo "‚ö†Ô∏è No se encontr√≥ k8s/api-gateway-deployment.yaml ‚Äî omitiendo apply"
                            fi

                            if [ -f k8s/proxy-client-deployment.yaml ]; then
                                kubectl apply -f k8s/proxy-client-deployment.yaml -n ecommerce
                                kubectl wait --for=condition=available --timeout=120s deployment/proxy-client -n ecommerce || true
                            else
                                echo "‚ö†Ô∏è No se encontr√≥ k8s/proxy-client-deployment.yaml ‚Äî omitiendo apply"
                            fi
                        '''
                    }
                }
            }
        }

        stage('üèóÔ∏è Build & Test Services (ordered)') {
            stages {
                stage('shipping-service') {
                    stages {
                        stage('Build shipping-service') {
                            steps {
                                echo 'üî® Construyendo shipping-service...'
                                dir('shipping-service') { sh 'mvn clean package -DskipTests' }
                            }
                        }
                        stage('Test shipping-service') {
                            steps { dir('shipping-service') { sh 'mvn test || true' } }
                        }
                        stage('Docker Build shipping-service') {
                            steps {
                                dir('shipping-service') {
                                    sh '''
                                        docker build -t shipping-service:latest .
                                        docker tag shipping-service:latest shipping-service:${BUILD_NUMBER}
                                        docker save shipping-service:latest | docker exec -i minikube docker load
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('product-service') {
                    stages {
                        stage('Build product-service') {
                            steps { dir('product-service') { sh 'mvn clean package -DskipTests' } }
                        }
                        stage('Test product-service') {
                            steps { dir('product-service') { sh 'mvn test || true' } }
                        }
                        stage('Docker Build product-service') {
                            steps {
                                dir('product-service') {
                                    sh '''
                                        docker build -t product-service:latest .
                                        docker tag product-service:latest product-service:${BUILD_NUMBER}
                                        docker save product-service:latest | docker exec -i minikube docker load
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('payment-service') {
                    stages {
                        stage('Build payment-service') {
                            steps { dir('payment-service') { sh 'mvn clean package -DskipTests' } }
                        }
                        stage('Test payment-service') {
                            steps { dir('payment-service') { sh 'mvn test || true' } }
                        }
                        stage('Docker Build payment-service') {
                            steps {
                                dir('payment-service') {
                                    sh '''
                                        docker build -t payment-service:latest .
                                        docker tag payment-service:latest payment-service:${BUILD_NUMBER}
                                        docker save payment-service:latest | docker exec -i minikube docker load
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('favourite-service') {
                    stages {
                        stage('Build favourite-service') {
                            steps { dir('favourite-service') { sh 'mvn clean package -DskipTests' } }
                        }
                        stage('Test favourite-service') {
                            steps { dir('favourite-service') { sh 'mvn test || true' } }
                        }
                        stage('Docker Build favourite-service') {
                            steps {
                                dir('favourite-service') {
                                    sh '''
                                        docker build -t favourite-service:latest .
                                        docker tag favourite-service:latest favourite-service:${BUILD_NUMBER}
                                        docker save favourite-service:latest | docker exec -i minikube docker load
                                    '''
                                }
                            }
                        }
                    }
                }

                stage('user-service') {
                    stages {
                        stage('Build user-service') {
                            steps { dir('user-service') { sh 'mvn clean package -DskipTests' } }
                        }
                        stage('Test user-service') {
                            steps { dir('user-service') { sh 'mvn test || true' } }
                        }
                        stage('Docker Build user-service') {
                            steps {
                                dir('user-service') {
                                    sh '''
                                        docker build -t user-service:latest .
                                        docker tag user-service:latest user-service:${BUILD_NUMBER}
                                        docker save user-service:latest | docker exec -i minikube docker load
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('üì¶ Verificar Artefactos') {
            steps {
                echo 'üîç Verificando JAR files y Docker images...'
                sh '''
                    echo "=== JAR Files Generados ==="
                    find . -name "*.jar" -path "*/target/*" -not -path "*original*" | while read jar; do
                        echo "‚úÖ $jar ($(du -h "$jar" | cut -f1))"
                    done
                    
                    echo ""
                    echo "=== Docker Images en Host ==="
                    docker images | grep -E "(user-service|product-service|favourite-service|order-service|payment-service|shipping-service)" || true
                    
                    echo ""
                    echo "=== Docker Images en Minikube ==="
                    minikube image ls | grep -E "(user-service|product-service|favourite-service|order-service|payment-service|shipping-service)" || true
                '''
            }
        }
        
        stage('üöÄ Deploy to Kubernetes (Stage)') {
            steps {
                echo '‚ò∏Ô∏è Desplegando microservicios en Kubernetes...'
                sh '''
                    # Crear namespace si no existe
                    kubectl get namespace ecommerce || kubectl create namespace ecommerce
                    
                    # Aplicar deployments
                    echo "üìå Desplegando user-service..."
                    kubectl apply -f k8s/user-service-deployment.yaml
                    
                    echo "üìå Desplegando product-service..."
                    kubectl apply -f k8s/product-service-deployment.yaml
                    
                    echo "üìå Desplegando favourite-service..."
                    kubectl apply -f k8s/favourite-service-deployment.yaml
                    
                    echo "üìå Desplegando order-service..."
                    kubectl apply -f k8s/order-service-deployment.yaml
                    
                    echo "üìå Desplegando payment-service..."
                    kubectl apply -f k8s/payment-service-deployment.yaml
                    
                    echo "üìå Desplegando shipping-service..."
                    kubectl apply -f k8s/shipping-service-deployment.yaml
                    
                    echo ""
                    echo "‚úÖ Deployments aplicados"
                '''
            }
        }
        
        stage('‚è≥ Esperar Deployments') {
            steps {
                echo '‚è∞ Esperando que los pods est√©n listos...'
                sh '''
                    echo "Esperando user-service..."
                    kubectl wait --for=condition=available --timeout=120s deployment/user-service -n ecommerce || true
                    
                    echo "Esperando product-service..."
                    kubectl wait --for=condition=available --timeout=120s deployment/product-service -n ecommerce || true
                    
                    echo "Esperando favourite-service..."
                    kubectl wait --for=condition=available --timeout=120s deployment/favourite-service -n ecommerce || true
                    
                    echo "Esperando order-service..."
                    kubectl wait --for=condition=available --timeout=120s deployment/order-service -n ecommerce || true
                    
                    echo "Esperando payment-service..."
                    kubectl wait --for=condition=available --timeout=120s deployment/payment-service -n ecommerce || true
                    
                    echo "Esperando shipping-service..."
                    kubectl wait --for=condition=available --timeout=120s deployment/shipping-service -n ecommerce || true
                    
                    echo ""
                    echo "Estado de los pods:"
                    kubectl get pods -n ecommerce
                '''
            }
        }
        
        stage('üß™ Integration Tests on K8s') {
            parallel {
                stage('Test user-service en K8s') {
                    steps {
                        script {
                            echo 'üîç Verificando user-service en Kubernetes...'
                            sh '''
                                MINIKUBE_IP=$(minikube ip)
                                SERVICE_URL="http://${MINIKUBE_IP}:30700"
                                
                                echo "Testeando: ${SERVICE_URL}/actuator/health"
                                
                                # Esperar a que el servicio responda
                                for i in {1..30}; do
                                    if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                        echo "‚úÖ user-service est√° respondiendo"
                                        curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "‚úÖ Health check OK"
                                        break
                                    fi
                                    echo "Intento $i/30 - Esperando user-service..."
                                    sleep 5
                                done
                            '''
                        }
                    }
                }
                
                stage('Test product-service en K8s') {
                    steps {
                        script {
                            echo 'üîç Verificando product-service en Kubernetes...'
                            sh '''
                                MINIKUBE_IP=$(minikube ip)
                                SERVICE_URL="http://${MINIKUBE_IP}:30500"
                                
                                echo "Testeando: ${SERVICE_URL}/actuator/health"
                                
                                for i in {1..30}; do
                                    if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                        echo "‚úÖ product-service est√° respondiendo"
                                        curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "‚úÖ Health check OK"
                                        break
                                    fi
                                    echo "Intento $i/30 - Esperando product-service..."
                                    sleep 5
                                done
                            '''
                        }
                    }
                }
                
                stage('Test order-service en K8s') {
                    steps {
                        script {
                            echo 'üîç Verificando order-service en Kubernetes...'
                            sh '''
                                MINIKUBE_IP=$(minikube ip)
                                SERVICE_URL="http://${MINIKUBE_IP}:30300"
                                
                                echo "Testeando: ${SERVICE_URL}/actuator/health"
                                
                                for i in {1..30}; do
                                    if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                        echo "‚úÖ order-service est√° respondiendo"
                                        curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "‚úÖ Health check OK"
                                        break
                                    fi
                                    echo "Intento $i/30 - Esperando order-service..."
                                    sleep 5
                                done
                            '''
                        }
                    }
                }
                
                stage('Test payment-service en K8s') {
                    steps {
                        script {
                            echo 'üîç Verificando payment-service en Kubernetes...'
                            sh '''
                                MINIKUBE_IP=$(minikube ip)
                                SERVICE_URL="http://${MINIKUBE_IP}:30400"
                                
                                echo "Testeando: ${SERVICE_URL}/actuator/health"
                                
                                for i in {1..30}; do
                                    if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                        echo "‚úÖ payment-service est√° respondiendo"
                                        curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "‚úÖ Health check OK"
                                        break
                                    fi
                                    echo "Intento $i/30 - Esperando payment-service..."
                                    sleep 5
                                done
                            '''
                        }
                    }
                }
                
                stage('Test shipping-service en K8s') {
                    steps {
                        script {
                            echo 'üîç Verificando shipping-service en Kubernetes...'
                            sh '''
                                MINIKUBE_IP=$(minikube ip)
                                SERVICE_URL="http://${MINIKUBE_IP}:30600"
                                
                                echo "Testeando: ${SERVICE_URL}/actuator/health"
                                
                                for i in {1..30}; do
                                    if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                        echo "‚úÖ shipping-service est√° respondiendo"
                                        curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "‚úÖ Health check OK"
                                        break
                                    fi
                                    echo "Intento $i/30 - Esperando shipping-service..."
                                    sleep 5
                                done
                            '''
                        }
                    }
                }
                
                stage('Test favourite-service en K8s') {
                    steps {
                        script {
                            echo 'üîç Verificando favourite-service en Kubernetes...'
                            sh '''
                                MINIKUBE_IP=$(minikube ip)
                                SERVICE_URL="http://${MINIKUBE_IP}:30800"
                                
                                echo "Testeando: ${SERVICE_URL}/actuator/health"
                                
                                for i in {1..30}; do
                                    if curl -s -f "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
                                        echo "‚úÖ favourite-service est√° respondiendo"
                                        curl -s "${SERVICE_URL}/actuator/health" | grep -q "UP" && echo "‚úÖ Health check OK"
                                        break
                                    fi
                                    echo "Intento $i/30 - Esperando favourite-service..."
                                    sleep 5
                                done
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üìä Estado Final') {
            steps {
                echo 'üìã Generando reporte del deployment...'
                sh '''
                    echo "========================================="
                    echo "    REPORTE DE DEPLOYMENT - STAGE"
                    echo "========================================="
                    echo ""
                    
                    echo "üì¶ Deployments:"
                    kubectl get deployments -n ecommerce
                    echo ""
                    
                    echo "üéØ Services:"
                    kubectl get services -n ecommerce
                    echo ""
                    
                    echo "üê≥ Pods:"
                    kubectl get pods -n ecommerce
                    echo ""
                    
                    echo "üì° Endpoints de los servicios:"
                    MINIKUBE_IP=$(minikube ip)
                    echo "  user-service:      http://${MINIKUBE_IP}:30700"
                    echo "  product-service:   http://${MINIKUBE_IP}:30500"
                    echo "  favourite-service: http://${MINIKUBE_IP}:30800"
                    echo "  order-service:     http://${MINIKUBE_IP}:30300"
                    echo "  payment-service:   http://${MINIKUBE_IP}:30400"
                    echo "  shipping-service:  http://${MINIKUBE_IP}:30600"
                    echo ""
                    
                    echo "========================================="
                '''
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ ¬°Pipeline completado exitosamente!'
            echo 'üìã Todos los microservicios fueron:'
            echo '   ‚úì Compilados'
            echo '   ‚úì Testeados'
            echo '   ‚úì Construidos como Docker images'
            echo '   ‚úì Desplegados en Kubernetes'
            echo '   ‚úì Verificados con health checks'
        }
        failure {
            echo '‚ùå Pipeline fall√≥. Revisando estado...'
            sh '''
                echo "Estado de pods en ecommerce namespace:"
                kubectl get pods -n ecommerce || true
                
                echo ""
                echo "Logs de pods con problemas:"
                kubectl get pods -n ecommerce -o json | jq -r '.items[] | select(.status.phase != "Running") | .metadata.name' | while read pod; do
                    echo "=== Logs de $pod ==="
                    kubectl logs $pod -n ecommerce --tail=50 || true
                done
            '''
        }
        always {
            echo 'üèÅ Pipeline finalizado'
            // Archivar resultados de tests
            junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
        }
    }
}

